import numpy as np
import matplotlib.pyplot as plt


#—Ñ—É–Ω–∫—Ü–∏—è –≤—ã—á–∏–ª–µ–Ω–∏—è –±–∞–∑–∏—Å–Ω–æ–≥–æ –ø–æ–ª–∏–Ω–æ–º–∞ –õ–∞–≥—Ä–∞–Ω–∂–∞
def l_i(i, x, x_nodes):
    if i >= len(x_nodes):
        exit(1)
    l_i = 1
    for j in range(len(x_nodes)):
        if j!=i:
             l_i *= (x - x_nodes[j])/(x_nodes[i] - x_nodes[j])
    return l_i


#—Ñ—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–ª–∏–Ω–æ–º–∞ –õ–∞–≥—Ä–∞–Ω–∂–∞
def L(x, x_nodes, y_nodes):
    L = 0
    for i in range(len(x_nodes)):
        L += y_nodes[i] * l_i(i, x, x_nodes)
    return L


#—Ñ—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —á–µ–±—ã—à–µ–≤—Å–∫–∏—Ö —É–∑–ª–æ–≤
def cheb(n) -> list:
    return(np.array([np.cos((2*i - 1) / (2 * n) * np.pi) for i in range(1, n + 1)]))


#–∫–ª–∞—Å—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏ –ü–∞–¥–µ
class Params:
    def __init__(self, n, m, a_j, b_k):
        self.n = n
        self.m = m
        self.a_j = a_j
        self.b_k = b_k


#–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏ –ü–∞–¥–µ
def generate_params():
    n = np.random.randint(7, 16)
    m = np.random.randint(7, 16)
    a_j = np.random.sample(m, )
    b_k = np.random.sample(n, )
    return Params(n, m, a_j, b_k)


#—Ñ—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏ –ü–∞–¥–µ
def pade(x, *params_list):
    sum_a_j = 0
    sum_b_k = 0
    for obj in params_list:
        for j in range(obj.m):
            sum_a_j += obj.a_j[j] * x ** j
        for k in range(1, obj.n):
            sum_b_k += obj.b_k[k] * x ** k
    return sum_a_j / (1 + sum_b_k)


#—Ñ—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ –∞–ø–ø—Ä–æ–∫—Å–∏–º–∞—Ü–∏–∏ –ü–∞–¥–µ –∏ –∏–Ω—Ç–µ–ø–æ–ª—è—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–ª–∏–Ω–æ–º–æ–≤
def plotting(x, x_cheb, kter):
    fig, ax = plt.subplots(1, 1, figsize=(24, 24))
    x_def = np.linspace(-1, 1, 200)
    y_def = [pade(x, params_list[kter]) for x in x_def]
    y_eq = [pade(x, params_list[kter]) for x in x_eq_nodes]
    y_eq_interp = [L(i, x_eq_nodes, y_eq) for i in x_def]
    y_cheb = [pade(x, params_list[kter]) for x in x_ch_nodes]
    y_cheb_interp = [L(i, x_ch_nodes, y_cheb) for i in x_def]
    ax.set_xlabel("x", fontsize=14)
    ax.set_ylabel("y", fontsize=14)
    ax.plot(x_eq_nodes, y_eq, 'o', color="#BA55D3", markersize=5)  # nodes
    ax.plot(x_def, y_def, '-', color="#40E0D0", label=r"$f_{n, m}(x)$")
    ax.plot(x_def, y_eq_interp, '-', color="#BA55D3", label=r"$L(x),~eq~nodes$")
    ax.plot(x_def, y_cheb_interp, '-', color="#4169E1", label=r"$L(x),~cheb~nodes$")
    ax.plot(x_ch_nodes, y_cheb, 'o', color="#4169E1", markersize=5)
    ax.grid()
    ax.legend()


#—Ñ—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
def distance():
    nodes = [] #–º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π N = {1, ... , 30}
    max_dist_eq = [0.] * 30  # –í –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ ùêø‚àû –Ω–æ—Ä–º–æ–π —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–∞—è –Ω–æ—Ä–º–∞,
    max_dist_ch = [0.] * 30  # –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫ ||ùëî(ùë•)||‚àû = maxùë•‚àà[ùëé;ùëè]
    for node in range(1, 31):
        nodes.append(node)
    fig, ax = plt.subplots(1, 1, figsize=(24, 24))
    for i in range(1, 31):
        x_def = np.linspace(-1, 1, 200)
        x_ch = np.array(cheb(i))  # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —á–µ–±—ã—à–µ–≤—Å–∫–∏—Ö —É–∑–ª–æ–≤
        x_eq = np.linspace(-1, 1, i)  # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã—Ö —É–∑–ª–æ–≤
        y_def = [pade(x, params_list[kter]) for x in x_def]
        y_cheb = [pade(x, params_list[kter]) for x in x_ch]
        y_eq = [pade(x, params_list[kter]) for x in x_eq]
        y_eq_interpolar = [L(it, x_eq, y_eq) for it in x_def]
        y_cheb_interpolar = [L(it, x_ch, y_cheb) for it in x_def]
        max_dist_eq[i - 1] = max([np.abs(y_def[iter] - y_eq_interpolar[iter]) for iter in range(200)])
        max_dist_ch[i - 1] = max([np.abs(y_def[iter] - y_cheb_interpolar[iter]) for iter in range(200)])
    ax.set_xlabel("x", fontsize=14)
    ax.set_ylabel("y", fontsize=14)
    ax.semilogy(nodes, max_dist_eq, '-', color="#FF00FF", label=r"$||g(x)||_{\infty}~eq~nodes$")
    ax.semilogy(nodes, max_dist_ch, '-', color="#1E90FF", label=r"$||g(x)||_{\infty}~cheb~nodes$")
    ax.grid()
    ax.legend()


if __name__ == '__main__':
    #np.random.seed(1000)
    params_list = [] #—Å–ø–∏—Å–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è 100 —Ñ—É–Ω–∫—Ü–∏–π –ü–∞–¥–µ
    N = 7 #–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 5
    max_dist_eq = [0.] * 30   # –í –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ ùêø‚àû –Ω–æ—Ä–º–æ–π —è–≤–ª—è–µ—Ç—Å—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–∞—è –Ω–æ—Ä–º–∞,
    max_dist_ch = [0.] * 30                      # –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫ ||ùëî(ùë•)||‚àû = maxùë•‚àà[ùëé;ùëè]
    for i in range(100): #–í —Ü–∏–∫–ª–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è 100 —Ñ—É–Ω–∫—Ü–∏–π
        params_list.append(generate_params())
    x_ch_nodes = np.array(cheb(N)) #–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —á–µ–±—ã—à–µ–≤—Å–∫–∏—Ö —É–∑–ª–æ–≤
    x_eq_nodes = np.linspace(-1, 1, N) #–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã—Ö —É–∑–ª–æ–≤
    for kter in range(100): #–ø—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ 100 —Ñ—É–Ω–∫—Ü–∏—è–º
        if kter % 25 == 0: #–±—É–¥–µ–º –≤—ã–≤–æ–¥–∏—Ç—å –∫–∞–∂–¥—É—é 25-—É—é —Ñ—É–Ω–∫—Ü–∏—é
            plotting(x_eq_nodes, x_ch_nodes, kter)
            distance()
    plt.show()